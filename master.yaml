Description: >

    This template deploys a VPC, with a pair of public and private subnets spread
    across two Availability Zones. It deploys an Internet Gateway, with a default
    route on the public subnets, plus two NAT Gateways for the private ones.
    It then deploys an Aurora cluster, a public S3 bucket and a corresponding
    CloudFront distribution.
    Finally, it deploys an ECS cluster with an Application Load Balancer at the front
    and one ECR Docker registry to push your Laravel and Nginx images to.

    This template uses the public Docker image getlionel/nginx-to-https to handle
    redirection from HTTP to HTTPS within the cluster.

    Full article on Medium here: https://medium.com

    Author: Lionel Martin <hi@getlionel.com>

Parameters:

    # CertificateArn:
    #     Description: The AWS ARN of the SSL certificate to be used by the load-balancer
    #     Type: String

    # CloudFrontOAI:
    #     Description: CloudFront Origin Access Identity
    #     Type: String

    # CertificateArnCF:
    #     Description: AWS ARN of the us-east-1 SSL certificate to be used by CloudFront
    #     Type: String
    InstanceType: 
        Description: "WebServer EC2 instance type"
        Type : "String"
        Default: "t4g.micro"
        AllowedValues:
            - "t2.micro"
            - "t4g.micro"
            - "t4g.small"
            - "t4g.medium"
        ConstraintDescription: "must be a valid EC2 instance type."
    # ClusterSize:
    #     Description: Number of EC2 instances in our ECS cluster
    #     Type: String
    #     Default: 1

    # BaseUrl:
    #     Description: Second level domain name for your application (for example laravelaws.com)
    #     Type: String

    DBInstanceType:
        Description: "Database instance class"
        Type: "String"
        Default : "db.t3.micro"
        AllowedValues :
            - "db.t2.micro"     # 프리티어 가능한 경우만.
            - "db.t3.micro"
            - "db.t3.small"
            - "db.t3.medium"
            - "db.t3.large"
            - "db.m6g.large"
        ConstraintDescription: "must select a valid database instance type."

    DBName:
        Description: "database and database admin name"
        Type: "String"
        MinLength: "1"
        MaxLength: "64"
        AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
        ConstraintDescription: "must begin with a letter and contain only alphanumeric characters."
 
    DBMasterPwd:
        Description: Database master password
        Type: String

Resources:
    VPC:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: s3://bizcare-formations/vpc.yaml
            Parameters:
                VpcCIDR:            10.0.0.0/16
                PublicSubnet1CIDR:  10.0.100.0/24
                PublicSubnet2CIDR:  10.0.101.0/24
                PrivateSubnet1CIDR: 10.0.0.0/24
                PrivateSubnet2CIDR: 10.0.1.0/24

    Storage:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: s3://bizcare-formations/storage.yaml
            Parameters:
                DatabaseInstanceType: !Ref DBInstanceType
                DatabasePassword: !Ref DBMasterPwd
                DatabaseUsername: !Ref DBName
                DatabaseSubnets: !GetAtt VPC.Outputs.PrivateSubnets
                DatabaseSecurityGroup: !GetAtt VPC.Outputs.DBSecurityGroup
                DatabaseName: !Ref DBName

    Web:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: s3://bizcare-formations/web.yaml
            Parameters:
                EnvironmentName: !Ref AWS::StackName
                VPC: !GetAtt VPC.Outputs.VPC
                PrivateSubnets: !GetAtt VPC.Outputs.PrivateSubnets
                PublicSubnets: !GetAtt VPC.Outputs.PublicSubnets
                LBCertificateArn: !Ref CertificateArn
                InstanceType: !Ref InstanceType
                ClusterSize: !Ref ClusterSize
                LBSecurityGroup: !GetAtt VPC.Outputs.LoadBalancerSecurityGroup
                ECSSecurityGroup: !GetAtt VPC.Outputs.ECSSecurityGroup
                S3BucketName: !GetAtt Storage.Outputs.S3BucketName
                CloudFrontOAI: !Ref CloudFrontOAI
                CFCertificateArn: !Ref CertificateArnCF
                CDNAlias: !Join [ ".", [ "files", !Ref BaseUrl ] ]

    WebService:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: s3://bizcare-formations/service.yaml
            Parameters:
                VPC: !GetAtt VPC.Outputs.VPC
                Cluster: !GetAtt Web.Outputs.Cluster
                ECR: !GetAtt Web.Outputs.ECR
                ListenerHTTP: !GetAtt Web.Outputs.ListenerHTTP
                ListenerHTTPS: !GetAtt Web.Outputs.ListenerHTTPS
                DesiredCount: 1
                Path: "*"
                APPURL: !Join [ "", [ "https://", !Ref BaseUrl ] ]
                DBCONNECTION: mysql
                DBHOST: !GetAtt Storage.Outputs.EndpointAddress
                DBPORT: !GetAtt Storage.Outputs.EndpointPort
                DBDATABASE: !Ref AWS::StackName
                DBUSERNAME: laravel
                DBPASSWORD: !Ref DBMasterPwd
                MAILDRIVER: !Ref MailDriver
                MAILHOST: !Ref MailHost
                MAILPORT: !Ref MailPort
                MAILUSERNAME: !Ref MailUsername
                MAILPASSWORD: !Ref MailPassword
                MAILFROMADDRESS: !Join [ "@", [ "admin", !Ref BaseUrl ] ]
                MAILFROMNAME: !Join [ " ", [ "Admin from", !Ref BaseUrl ] ]
                FILESYSTEMDRIVER: s3
                AWSBUCKET: !GetAtt Storage.Outputs.S3BucketName
                QUEUEDRIVER: sqs
                QUEUENAME: !GetAtt Web.Outputs.QueueName

Outputs:

    BucketName:
        Description: S3 Bucket Name with public read access
        Value: !GetAtt Storage.Outputs.S3BucketName

    QueueName:
        Description: SQS queue name
        Value: !GetAtt Web.Outputs.QueueName

    DatabaseInstance:
        Description: Database instance
        Value: !Join [ ":", [ !GetAtt Storage.Outputs.EndpointAddress, !GetAtt Storage.Outputs.EndpointPort ] ]

    ECR:
        Description: The ECR where to push your Docker images
        Value: !Join [ ".", [ !Ref "AWS::AccountId", "dkr.ecr", !Ref "AWS::Region", !Join [ "/", [ "amazonaws.com", !GetAtt Web.Outputs.ECR ] ] ] ]

    ServiceUrl:
        Description: The URL endpoint for the website service
        Value: !Join ["", [ !GetAtt Web.Outputs.LoadBalancerUrl, "/" ]]

#    CloudFrontDistribution:
#        Description: Domain name for the CloudFront distribution
#        Value: !GetAtt CDN.Outputs.CFDistributionDomainName
